#version 400 core

in vec3 pos;
in vec4 color;
in vec3 norm;
in vec2 glow;
in vec3 cube;

out vec4 pass_color;

uniform mat4 trans;
uniform mat4 view;
uniform mat4 proj;

uniform vec3 lightPos[8];
uniform vec3 lightColor[8];
uniform vec3 attenuation[8];

const float shineDamper = 10.0;
const float reflectivity = 1.0;

uniform mat4 toShadow;
uniform float shadowDist;
uniform sampler2D shadowMap;
uniform float mapSize;
const int pcfCount = 2;
const float totalTexels = (pcfCount * 2.0 +1.0) * (pcfCount * 2.0 +1.0);

uniform vec4 plane;

void main(void){

	vec4 worldPos = trans * vec4(pos, 1.0);
	
	gl_ClipDistance[0] = dot(worldPos,plane);
	
	vec4 finalPos = proj * view * worldPos;

	gl_Position =  proj * view *  trans * vec4((pos+cube), 1.0);

	
	
	vec3 surfNormal = normalize((trans * vec4(norm,0.0)).xyz);
	vec3 toCamera = normalize((inverse(view) * vec4(0.0,0.0,0.0,1.0)).xyz -worldPos.xyz);
	
	float transitionDist = shadowDist/20.0;
	
	vec4 shadowCoords = toShadow * worldPos; 
	
	float distance = length((view * worldPos).xyz);
	distance = distance - (shadowDist - transitionDist);
	distance = distance/transitionDist;
	shadowCoords.w = clamp(1.0-distance,0.0,1.0);
	
	float texelSize = 1.0/mapSize;
	float total = 0.0;
	
	for(int x =-pcfCount; x<=pcfCount;x++ ){
		for(int y =-pcfCount; y<=pcfCount;y++ ){
			float nearestLight = texture(shadowMap,shadowCoords.xy + (vec2(x,y)*texelSize)).r;
			if(shadowCoords.z > nearestLight+0.005){
				total +=1.0;
			}
		}
	}
	total /= totalTexels;
	
	float lightFactor = 1.0- (total * shadowCoords.w);
	
	
	
	vec4 totalDiffuse = vec4(0.0);
	vec4 totalSpecular = vec4(0.0);

	int i;
	for (i=0;i<8;i++){
		
		vec3 toLight = lightPos[i] - worldPos.xyz;
		float d = length(toLight);
		float attFactor = attenuation[i].x + (attenuation[i].y * d) + (attenuation[i].z * d * d); 
		toLight = normalize(toLight);
		
		if((norm.x == 0.0) && (norm.y == 0.0) && (norm.z == 0.0)){
			totalDiffuse = totalDiffuse + vec4(max(dot(toCamera,toLight),0.0) * lightColor[i], 1.0)/attFactor;
		}else{
			totalDiffuse = totalDiffuse + vec4(dot(surfNormal,toLight) * lightColor[i], 1.0)/attFactor;
		}
		
		float specFactor = max(dot(reflect(-toLight,surfNormal),toCamera),0.0);
		float dampedFactor = pow(specFactor,shineDamper);
		totalSpecular = totalSpecular + (vec4(dampedFactor * reflectivity * lightColor[i],0.0))/attFactor;
		
	}
	
	totalDiffuse = max((totalDiffuse * lightFactor),glow.y);
	totalSpecular = totalSpecular * lightFactor;
	totalSpecular *= glow.x;
	
	pass_color = totalDiffuse * color + totalSpecular;

}
